package main

import (
        "fmt"
        "hash/crc32"
        "sort"
        "strconv"
)

type Hash func(data []byte) uint32

type CMap struct {
        hash     Hash
        replicas int
        keys     []int //sorted
        hashmap  map[int]string
}

func New(replicas int, fn Hash) *CMap {
        m := &CMap{
                replicas: replicas,
                hash:     fn,
                hashmap:  make(map[int]string),
        }
        if m.hash == nil {
                m.hash = crc32.ChecksumIEEE
        }
        return m
}

func (m *CMap) IsEmpty() bool {
        return len(m.keys) == 0
}

func (m *CMap) Add(keys ...string) {
        for _, key := range keys {
                for i := 0; i < m.replicas; i++ {
                        hash := int(m.hash([]byte(strconv.Itoa(i) + key)))
                        m.keys = append(m.keys, hash)
                        m.hashmap[hash] = key
                }
        }
        sort.Ints(m.keys)
}

func (m *CMap) Get(key string) string {
        if m.IsEmpty() {
                return ""
        }
        hash := int(m.hash([]byte(key)))
        idx := sort.Search(len(m.keys), func(i int) bool { return m.keys[i] >= hash })

        if idx == len(m.keys) {
                idx = 0
        }

        return m.hashmap[m.keys[idx]]
}

func main() {
        cm := New(5, nil)
        cm.Add("192.168.0.1")
        cm.Add("192.168.0.2")
        cm.Add("192.168.0.3")
        cm.Add("192.168.0.4")
        //cm.Add([]string{"192.168.0.1", "192.168.0.2", "192.168.0.3", "192.168.0.4"})
        fmt.Println(len(cm.keys))
        fmt.Println(cm)
}
